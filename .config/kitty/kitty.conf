# vim:fileencoding=utf-8:foldmethod=marker

#: Theme {{{

#: Note that these are to match the Iceberg Vim theme, they're taken from
#: https://gist.github.com/gkeep/9b6f3e86d44542f73b526183095d5c3a

background #161821
foreground #c6c8d1

selection_background #1e2132
selection_foreground #c6c8d1

cursor #d2d4de

# black
color0 #161821
color8 #6b7089

# red
color1 #e27878
color9 #e98989

# green
color2 #b4be82
color10 #c0ca8e

# yellow/orange
color3 #e2a478
color11 #e9b189

# blue
color4 #84a0c6
color12 #91acd1

# magenta/purple
color5 #a093c7
color13 #ada0d3

# cyan
color6 #89b8c2
color14 #95c4ce

# white
color7 #c6c8d1
color15 #d2d4de

# tab bar
active_tab_foreground   #161821
active_tab_background   #84a0c6
inactive_tab_foreground #d2d4de
inactive_tab_background #353a50
tab_bar_background      #0f1117

active_border_color #84a0c6
inactive_border_color #353a50
#: }}}

#: Fonts {{{
#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: list-fonts` command. By default they are derived automatically, by
#: the OSes font system. Setting them manually is useful for font
#: families that have many weight variants like Book, Medium, Thick,
#: etc.
font_family      SauceCodePro Nerd Font Medium
bold_font        SauceCodePro Nerd Font Bold
italic_font      SauceCodePro Nerd Font Medium Italic
bold_italic_font SauceCodePro Nerd Font Bold Italic

#: Font size (in pts)
font_size 14.0

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).
adjust_line_height  2
# adjust_column_width 0

#: Adjust the vertical alignment of text (the height in the cell at
#: which text is positioned). You can use either numbers, which are
#: interpreted as pixels or a percentages (number followed by %),
#: which are interpreted as the percentage of the line height. A
#: positive value moves the baseline up, and a negative value moves
#: them down. The underline and strikethrough positions are adjusted
#: accordingly.
adjust_baseline 0
#: }}}

#: Mouse {{{
#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly
# url_color #0087bd
url_style single

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.
open_url_with default

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable.
detect_urls yes
#: }}}

#: Window layout {{{
#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.
remember_window_size  yes
# initial_window_width  640
# initial_window_height 400


#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the https://sw.kovidgoyal.net/kitty/overview/#layouts.
enabled_layouts splits:split_axis=vertical


#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the keyboard
#: (start_resizing_window). The cells value is used for horizontal
#: resizing and the lines value for vertical resizing.
# window_resize_step_cells 2
# window_resize_step_lines 2

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified the unit is assumed to
#: be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.
window_border_width 1pt

#: Draw only the minimum borders needed. This means that only the
#: minimum needed borders for inactive windows are drawn. That is only
#: the borders that separate the inactive window from a neighbor. Note
#: that setting a non-zero window margin overrides this and causes all
#: borders to be drawn.
# draw_minimal_borders yes

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.
window_margin_width 4

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead. A single value sets all
#: four sides. Two values set the vertical and horizontal sides. Three
#: values set top, horizontal and bottom. Four values set top, right,
#: bottom and left.
single_window_margin_width 0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
window_padding_width 4

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be on
#: only the bottom and right edges.
# placement_strategy center

#: Ask for confirmation when closing an OS window or a tab that has at
#: least this number of kitty windows in it. A value of zero disables
#: confirmation. This confirmation also applies to requests to quit
#: the entire application (all OS windows, via the quit action).
#: Negative values are converted to positive ones, however, with
#: https://sw.kovidgoyal.net/kitty/shell-integration/ enabled, using
#: negative values means windows sitting at a shell prompt are not
#: counted, only windows where some command is currently running.
confirm_os_window_close 1

#: }}}

#: Tab bar {{{

#: Which edge to show the tab bar on, top or bottom
tab_bar_edge top

#: The margin to the left and right of the tab bar (in pts)
# tab_bar_margin_width 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar and
#: the second number is the margin between the tab bar and the
#: contents of the current tab.
# tab_bar_margin_height 0.0 0.0

#: The tab bar style, can be one of:
#: fade
#:     Each tab's edges fade into the background color (see tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file
#: separator
#:     Tabs are separated by a configurable separator (see tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators (see tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file tab_bar.py
#:     in the kitty config directory. For examples of how to write such a function see the functions
#:     named draw_tab_with_* in tab_bar.py in the kitty source code.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a mapping
#:     for the https://sw.kovidgoyal.net/kitty/actions/#select-tab action which presents you with a list
#:     of tabs and allows for easy switching to a tab.
tab_bar_style powerline

#: The horizontal alignment of the tab bar
# tab_bar_align left

#: The minimum number of tabs that must exist before the tab bar is
#: shown
tab_bar_min_tabs 1


# tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

# tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_separator " â”‡"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, or round.
tab_powerline_style slanted

#: Some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces surround the text with quotes.
# tab_activity_symbol none

#: A template to render the tab title. The default just renders the
#: title. If you wish to include the tab-index as well, use something
#: like: {index}: {title}. Useful if you have shortcuts mapped for
#: goto_tab N. If you prefer to see the index as a superscript, use
#: {sup.index}. In addition you can use {layout_name} for the current
#: layout name, {num_windows} for the number of windows in the tab and
#: {num_window_groups} for the number of window groups (not counting
#: overlay windows) in the tab. Note that formatting is done by
#: Python's string formatting machinery, so you can use, for instance,
#: {layout_name[:2].upper()} to show only the first two letters of the
#: layout name, upper-cased. If you want to style the text, you can
#: use styling directives, for example:
#: {fmt.fg.red}red{fmt.fg.default}normal{fmt.bg._00FF00}green
#: bg{fmt.bg.normal}. Similarly, for bold and italic:
#: {fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}.
tab_title_template "{title} {sup.index}"

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.
# active_tab_title_template none

#: }}}

#: Advanced {{{

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files.
# shell .

#: The terminal editor (such as ``vim`` or ``nano``) to use when
#: editing the kitty config file or similar tasks.

#: The default value of . means to use the environment variables
#: VISUAL and EDITOR in that order. If these variables aren't set,
#: kitty will run your shell (``$SHELL -l -i -c env``) to see if your
#: shell config files set VISUAL or EDITOR. If that doesn't work,
#: kitty will cycle through various known editors (``vim``, ``emacs``,
#: etc) and take the first one that exists on your system.
editor vim

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty. Reloading the config will not affect this
#: setting.
allow_remote_control yes

#: Tell kitty to listen to the specified unix/tcp socket for remote
#: control connections. Note that this will apply to all kitty
#: instances. It can be overridden by the kitty --listen-on command
#: line flag. This option accepts only UNIX sockets, such as
#: unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
#: variables are expanded. If {kitty_pid} is present then it is
#: replaced by the PID of the kitty process, otherwise the PID of the
#: kitty process is appended to the value, with a hyphen. This option
#: is ignored unless you also set allow_remote_control to enable
#: remote control. See the help for kitty --listen-on for more
#: details. Changing this option by reloading the config is not
#: supported.
# listen_on none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/overview/#startup-sessions in the
#: kitty documentation for details. Note that relative paths are
#: interpreted with respect to the kitty config directory. Environment
#: variables in the path are expanded. Changing this option by
#: reloading the config is not supported.
# startup_session default-session.conf

#: }}}

#: Scrollback {{{

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.
scrollback_lines 10000

#: }}}

#: OS specific tweaks {{{

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique. You
#: can use the values: left, right, or both to use only the left,
#: right or both Option keys as Alt, instead. Changing this setting by
#: reloading the config is not supported.
# macos_option_as_alt no

#: Have kitty quit when all the top-level windows are closed. By
#: default, kitty will stay running, even with no open windows, as is
#: the expected behavior on macOS.
macos_quit_when_last_window_closed yes

#: Show or hide the window title in the macOS window or menu-bar. A
#: value of window will show the title of the currently active window
#: at the top of the macOS window. A value of menubar will show the
#: title of the currently active window in the macOS menu-bar, making
#: use of otherwise wasted space. all will show the title everywhere
#: and none hides the title in the window and the menu-bar.
macos_show_window_title_in all

#: }}}

#: Keyboard shortcuts {{{
#: You can open a new window with the current working directory set to
#: the working directory of the current window using::
#:     map ctrl+alt+enter    launc
map F5 launch --location=hsplit --cwd=current
map F6 launch --location=vsplit --cwd=current
map F7 layout_action rotate
map F8 detach_window new-tab

map shift+left neighboring_window left
map shift+right neighboring_window right
map shift+up neighboring_window up
map shift+down neighboring_window down

map ctrl+alt+n resize_window narrower 5
map ctrl+alt+w resize_window wider 5
map ctrl+alt+t resize_window taller 5
map ctrl+alt+s resize_window shorter 5

map ctrl+alt+up move_window up
map ctrl+alt+left move_window left
map ctrl+alt+right move_window right
map ctrl+alt+down move_window down


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: There is also a toggle layout function that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
# map kitty_mod+l next_layout

#: }}}
